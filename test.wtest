import cosas.*
import camion.*

describe "pruebaUno" {
  test "camion vacio + bumblebee + kinght" {
    camion.cargar(bumblebee)
    camion.cargar(knightRider)
    assert.equals(#{bumblebee, knightRider}, camion.cosas())
  }
  test "carga de bumblebee y knight, descarga de bumblebee" {
    camion.cargar(bumblebee)
    camion.cargar(knightRider)
    camion.descargar(bumblebee)
    assert.equals(#{knightRider}, camion.cosas())
  }
  test "recargar a knight" {
    camion.cargar(knightRider)
    camion.cargar(knightRider)
    camion.descargar(bumblebee)
    assert.equals(#{knightRider}, camion.cosas())
  }
  test "tiene algo que pese tanto" {
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
    camion.cargar(bumblebee)
    assert.that(camion.hayAlgunoQuePese(800))
  }

  test "alguno que pese entre y entre" {
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(1)
    camion.cargar(paqueteDeLadrillos)
    assert.that(camion.hayAlgoQuePeseEntreY(2,4))
  }
  
  test "elMasPesadoDelCamion" {
    camion.cargar(bumblebee)
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(300)
    camion.cargar(paqueteDeLadrillos)
    assert.equals(bumblebee, camion.cosaMasPesadaDelCamion())
  }

  test "caso 1 total bultos" {
    cosas.contenedorPortuario.contiene(#{knightRider, bumblebee})
    camion.cargar(contenedorPortuario)
    cosas.embalajeDeSeguridad.embalar(residuosRadiactivos)
    camion.cargar(cosas.embalajeDeSeguridad)
    camion.cargar(arenaAGranel)
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(50)
    camion.cargar(paqueteDeLadrillos)
    cosas.bateriaAntiaerea.tieneMisiles(false)
    camion.cargar(bateriaAntiaerea)
    assert.equals(9, camion.cantidadDeBultos())
  }

  test "caso 2 total bultos" {
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(150)
    camion.cargar(paqueteDeLadrillos)
    camion.cargar(bateriaAntiaerea)
    camion.cargar(contenedorPortuario)
    assert.equals(5, camion.cantidadDeBultos())
  }

  test "caso 3 total bultos" {
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(350)
    camion.cargar(paqueteDeLadrillos)
    camion.cargar(arenaAGranel)
    assert.equals(4, camion.cantidadDeBultos())
  }

  test "embalaje de seguridad" {
    cosas.embalajeDeSeguridad.embalar(knightRider)
    camion.cargar(cosas.embalajeDeSeguridad)
    assert.equals(5, camion.peligroDelCamion() )
  }
  test "accidente caso 1"{
    cosas.bumblebee.esAuto(true)
    cosas.contenedorPortuario.contiene(#{knightRider,bumblebee})
    cosas.residuosRadiactivos.peso(30)
    cosas.embalajeDeSeguridad.embalar(residuosRadiactivos)
    cosas.arenaAGranel.peso(50)
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(100)
    cosas.bateriaAntiaerea.tieneMisiles(true)
//accidente
    cosas.contenedorPortuario.sufreAccidente()
    cosas.residuosRadiactivos.sufreAccidente()
    cosas.arenaAGranel.sufreAccidente()
    cosas.paqueteDeLadrillos.sufreAccidente()
    cosas.bateriaAntiaerea.sufreAccidente()
//Todo se accidentea como deberia?
    assert.notThat(cosas.bumblebee.esAuto())
    assert.equals(45, cosas.residuosRadiactivos.peso())
    assert.equals(70, cosas.arenaAGranel.peso())
    assert.equals(88, cosas.paqueteDeLadrillos.cantidadDeLadrillos())
    assert.notThat(cosas.bateriaAntiaerea.tieneMisiles())
  }

  test "caso 2 accidente" {
    cosas.bumblebee.esAuto(false)
    cosas.residuosRadiactivos.peso(30)
    cosas.paqueteDeLadrillos.cantidadDeLadrillos(10)
    cosas.bateriaAntiaerea.tieneMisiles(false)
//accidente
    cosas.bumblebee.sufreAccidente()
    cosas.residuosRadiactivos.sufreAccidente()
    cosas.paqueteDeLadrillos.sufreAccidente()
    cosas.bateriaAntiaerea.sufreAccidente()
//vamo devuelta
    assert.that(cosas.bumblebee.esAuto())
    assert.equals(45, cosas.residuosRadiactivos.peso())
    assert.equals(0, cosas.paqueteDeLadrillos.cantidadDeLadrillos())
    assert.notThat(cosas.bateriaAntiaerea.tieneMisiles())
  }

  test "deja en almacen" {
    almacen.agregarElementos(#{arenaAGranel})
    camion.cargar(bumblebee)
    camion.cargar(knightRider)
    camion.dejarCosasEn(almacen)
    assert.equals(#{bumblebee,knightRider,arenaAGranel}, almacen.elementos())
  }

  /*
  que puede circular por la ruta9 implica que el peligro total del camion es menor a 20 y no tiene exceso de peso
  */
  test "ruta 9 exitoso" {
    almacen.agregarElementos(#{knightRider, residuosRadiactivos})
    cosas.bumblebee.esAuto(true)
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{knightRider,residuosRadiactivos,bumblebee,arenaAGranel}, almacen.elementos())
    assert.equals(#{}, camion.cosas())
  }

  test "ruta 9 fallido por peligrosidad" {
    almacen.agregarElementos(#{knightRider, residuosRadiactivos})
    cosas.bumblebee.esAuto(false)
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{knightRider,residuosRadiactivos}, almacen.elementos())
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
  }

  test "ruta 9 fallido exceso de peso" {
    almacen.agregarElementos(#{knightRider, residuosRadiactivos})
    camion.cargar(bumblebee)
    cosas.arenaAGranel.peso(2000)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, ruta9)
    assert.equals(#{knightRider,residuosRadiactivos}, almacen.elementos())
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
  }
  test "caminos vecinales exitoso" {
    caminosVecinales.pesoMaximoPermitido(2000)
    almacen.agregarElementos(#{knightRider, residuosRadiactivos})
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, caminosVecinales)
    assert.equals(#{knightRider,residuosRadiactivos,bumblebee, arenaAGranel}, almacen.elementos())
    assert.equals(#{}, camion.cosas())
  }
  test "caminos vecinales fallidos" {
    caminosVecinales.pesoMaximoPermitido(300)
    almacen.agregarElementos(#{knightRider, residuosRadiactivos})
    camion.cargar(bumblebee)
    camion.cargar(arenaAGranel)
    camion.transportar(almacen, caminosVecinales)
    assert.equals(#{knightRider,residuosRadiactivos}, almacen.elementos())
    assert.equals(#{bumblebee, arenaAGranel}, camion.cosas())
  }








}